/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.util.List;
import java.time.OffsetDateTime;

import org.openapitools.model.ProviderAccountObject;
import org.openapitools.model.TimeValueObject;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-01T11:49:21.249468300+02:00[Europe/Vienna]")
@Validated
@Api(value = "values", description = "the values API")
public interface ValuesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /values/consumption/day
     * save consumption day values
     *
     * @param timeValueObject  (required)
     * @return successfully saved (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesConsumptionDay", notes = "save consumption day values", tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully saved") })
    @PostMapping(
        value = "/values/consumption/day",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> valuesConsumptionDay(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<TimeValueObject> timeValueObject)
    {
        try
        {
            TimeValueObject.saveInDatabase(TimeValueObject.Resolution.day, timeValueObject);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /values/consumption/day/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}
     * get last timestamp of day values of provideraccount and datapointname
     *
     * @param providerAccountId  (required)
     * @param meeterId  (required)
     * @param datapointname  (required)
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesConsumptionDayLastTimeStamp", notes = "get last timestamp of day values of provideraccount and datapointname", response = OffsetDateTime.class, tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = OffsetDateTime.class) })
    @GetMapping(
        value = "/values/consumption/day/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}",
        produces = { "application/json" }
    )
    default ResponseEntity<OffsetDateTime> valuesConsumptionDayLastTimeStamp(@ApiParam(value = "",required=true) @PathVariable("providerAccountId") Integer providerAccountId,@ApiParam(value = "",required=true) @PathVariable("meeterId") String meeterId,@ApiParam(value = "",required=true) @PathVariable("datapointname") String datapointname) {

        try
        {
            return new ResponseEntity<>(TimeValueObject.getLastTimestamp(TimeValueObject.Resolution.day, providerAccountId, meeterId, datapointname), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }


    /**
     * POST /values/consumption/hour
     * save consumption hour values
     *
     * @param timeValueObject  (required)
     * @return successfully saved (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesConsumptionHour", notes = "save consumption hour values", tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully saved") })
    @PostMapping(
        value = "/values/consumption/hour",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> valuesConsumptionHour(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<TimeValueObject> timeValueObject)
    {
        try
        {
            TimeValueObject.saveInDatabase(TimeValueObject.Resolution.hour, timeValueObject);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /values/consumption/hour/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}
     * get last timestamp of hour values of provideraccount and datapointname
     *
     * @param providerAccountId  (required)
     * @param meeterId  (required)
     * @param datapointname  (required)
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesConsumptionHourLastTimeStamp", notes = "get last timestamp of hour values of provideraccount and datapointname", response = OffsetDateTime.class, tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = OffsetDateTime.class) })
    @GetMapping(
        value = "/values/consumption/hour/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}",
        produces = { "application/json" }
    )
    default ResponseEntity<OffsetDateTime> valuesConsumptionHourLastTimeStamp(@ApiParam(value = "",required=true) @PathVariable("providerAccountId") Integer providerAccountId,@ApiParam(value = "",required=true) @PathVariable("meeterId") String meeterId,@ApiParam(value = "",required=true) @PathVariable("datapointname") String datapointname) {

        try
        {
            return new ResponseEntity<>(TimeValueObject.getLastTimestamp(TimeValueObject.Resolution.hour, providerAccountId, meeterId, datapointname), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }


    /**
     * POST /values/consumption/month
     * save consumption month values
     *
     * @param timeValueObject  (required)
     * @return successfully saved (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesConsumptionMonth", notes = "save consumption month values", tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully saved") })
    @PostMapping(
        value = "/values/consumption/month",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> valuesConsumptionMonth(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<TimeValueObject> timeValueObject)
    {
        try
        {
            TimeValueObject.saveInDatabase(TimeValueObject.Resolution.month, timeValueObject);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /values/consumption/month/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}
     * get last timestamp of month values of provideraccount and datapointname
     *
     * @param providerAccountId  (required)
     * @param meeterId  (required)
     * @param datapointname  (required)
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesConsumptionMonthLastTimeStamp", notes = "get last timestamp of month values of provideraccount and datapointname", response = OffsetDateTime.class, tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = OffsetDateTime.class) })
    @GetMapping(
        value = "/values/consumption/month/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}",
        produces = { "application/json" }
    )
    default ResponseEntity<OffsetDateTime> valuesConsumptionMonthLastTimeStamp(@ApiParam(value = "",required=true) @PathVariable("providerAccountId") Integer providerAccountId,@ApiParam(value = "",required=true) @PathVariable("meeterId") String meeterId,@ApiParam(value = "",required=true) @PathVariable("datapointname") String datapointname) {

        try
        {
            return new ResponseEntity<>(TimeValueObject.getLastTimestamp(TimeValueObject.Resolution.month, providerAccountId, meeterId, datapointname), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }


    /**
     * POST /values/consumption/year
     * save consumption year values
     *
     * @param timeValueObject  (required)
     * @return successfully saved (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesConsumptionYear", notes = "save consumption year values", tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully saved") })
    @PostMapping(
        value = "/values/consumption/year",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> valuesConsumptionYear(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<TimeValueObject> timeValueObject)
    {
        try
        {
            TimeValueObject.saveInDatabase(TimeValueObject.Resolution.year, timeValueObject);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /values/consumption/year/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}
     * get last timestamp of year values of provideraccount and datapointname
     *
     * @param providerAccountId  (required)
     * @param meeterId  (required)
     * @param datapointname  (required)
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesConsumptionYearLastTimeStamp", notes = "get last timestamp of year values of provideraccount and datapointname", response = OffsetDateTime.class, tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = OffsetDateTime.class) })
    @GetMapping(
        value = "/values/consumption/year/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}",
        produces = { "application/json" }
    )
    default ResponseEntity<OffsetDateTime> valuesConsumptionYearLastTimeStamp(@ApiParam(value = "",required=true) @PathVariable("providerAccountId") Integer providerAccountId,@ApiParam(value = "",required=true) @PathVariable("meeterId") String meeterId,@ApiParam(value = "",required=true) @PathVariable("datapointname") String datapointname) {

        try
        {
            return new ResponseEntity<>(TimeValueObject.getLastTimestamp(TimeValueObject.Resolution.year, providerAccountId, meeterId, datapointname), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }


    /**
     * POST /values/feedin/day
     * save feedin day values
     *
     * @param timeValueObject  (required)
     * @return successfully saved (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesFeedinDay", notes = "save feedin day values", tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully saved") })
    @PostMapping(
        value = "/values/feedin/day",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> valuesFeedinDay(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<TimeValueObject> timeValueObject)
    {
        try
        {
            TimeValueObject.saveInDatabase(TimeValueObject.Resolution.day, timeValueObject);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /values/feedin/day/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}
     * get last timestamp of day values of provideraccount and datapointname
     *
     * @param providerAccountId  (required)
     * @param meeterId  (required)
     * @param datapointname  (required)
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesFeedinDayLastTimeStamp", notes = "get last timestamp of day values of provideraccount and datapointname", response = OffsetDateTime.class, tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = OffsetDateTime.class) })
    @GetMapping(
        value = "/values/feedin/day/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}",
        produces = { "application/json" }
    )
    default ResponseEntity<OffsetDateTime> valuesFeedinDayLastTimeStamp(@ApiParam(value = "",required=true) @PathVariable("providerAccountId") Integer providerAccountId,@ApiParam(value = "",required=true) @PathVariable("meeterId") String meeterId,@ApiParam(value = "",required=true) @PathVariable("datapointname") String datapointname) {

        try
        {
            return new ResponseEntity<>(TimeValueObject.getLastTimestamp(TimeValueObject.Resolution.day, providerAccountId, meeterId, datapointname), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }


    /**
     * POST /values/feedin/hour
     * save feedin hour values
     *
     * @param timeValueObject  (required)
     * @return successfully saved (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesFeedinHour", notes = "save feedin hour values", tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully saved") })
    @PostMapping(
        value = "/values/feedin/hour",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> valuesFeedinHour(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<TimeValueObject> timeValueObject)
    {
        try
        {
            TimeValueObject.saveInDatabase(TimeValueObject.Resolution.day, timeValueObject);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /values/feedin/hour/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}
     * get last timestamp of hour values of provideraccount and datapointname
     *
     * @param providerAccountId  (required)
     * @param meeterId  (required)
     * @param datapointname  (required)
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesFeedinHourLastTimeStamp", notes = "get last timestamp of hour values of provideraccount and datapointname", response = OffsetDateTime.class, tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = OffsetDateTime.class) })
    @GetMapping(
        value = "/values/feedin/hour/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}",
        produces = { "application/json" }
    )
    default ResponseEntity<OffsetDateTime> valuesFeedinHourLastTimeStamp(@ApiParam(value = "",required=true) @PathVariable("providerAccountId") Integer providerAccountId,@ApiParam(value = "",required=true) @PathVariable("meeterId") String meeterId,@ApiParam(value = "",required=true) @PathVariable("datapointname") String datapointname) {

        try
        {
            return new ResponseEntity<>(TimeValueObject.getLastTimestamp(TimeValueObject.Resolution.hour, providerAccountId, meeterId, datapointname), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }


    /**
     * POST /values/feedin/month
     * save feedin month values
     *
     * @param timeValueObject  (required)
     * @return successfully saved (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesFeedinMonth", notes = "save feedin month values", tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully saved") })
    @PostMapping(
        value = "/values/feedin/month",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> valuesFeedinMonth(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<TimeValueObject> timeValueObject)
    {
        try
        {
            TimeValueObject.saveInDatabase(TimeValueObject.Resolution.month, timeValueObject);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /values/feedin/month/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}
     * get last timestamp of month values of provideraccount and datapointname
     *
     * @param providerAccountId  (required)
     * @param meeterId  (required)
     * @param datapointname  (required)
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesFeedinMonthLastTimeStamp", notes = "get last timestamp of month values of provideraccount and datapointname", response = OffsetDateTime.class, tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = OffsetDateTime.class) })
    @GetMapping(
        value = "/values/feedin/month/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}",
        produces = { "application/json" }
    )
    default ResponseEntity<OffsetDateTime> valuesFeedinMonthLastTimeStamp(@ApiParam(value = "",required=true) @PathVariable("providerAccountId") Integer providerAccountId,@ApiParam(value = "",required=true) @PathVariable("meeterId") String meeterId,@ApiParam(value = "",required=true) @PathVariable("datapointname") String datapointname) {

        try
        {
            return new ResponseEntity<>(TimeValueObject.getLastTimestamp(TimeValueObject.Resolution.month, providerAccountId, meeterId, datapointname), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }


    /**
     * POST /values/feedin/year
     * save feedin year values
     *
     * @param timeValueObject  (required)
     * @return successfully saved (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesFeedinYear", notes = "save feedin year values", tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully saved") })
    @PostMapping(
        value = "/values/feedin/year",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> valuesFeedinYear(@ApiParam(value = "" ,required=true )  @Valid @RequestBody List<TimeValueObject> timeValueObject)
    {
        try
        {
            TimeValueObject.saveInDatabase(TimeValueObject.Resolution.year, timeValueObject);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /values/feedin/year/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}
     * get last timestamp of year values of provideraccount and datapointname
     *
     * @param providerAccountId  (required)
     * @param meeterId  (required)
     * @param datapointname  (required)
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "valuesFeedinYearLastTimeStamp", notes = "get last timestamp of year values of provideraccount and datapointname", response = OffsetDateTime.class, tags={ "values", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = OffsetDateTime.class) })
    @GetMapping(
        value = "/values/feedin/year/lastTimeStamp/{providerAccountId}/{meeterId}/{datapointname}",
        produces = { "application/json" }
    )
    default ResponseEntity<OffsetDateTime> valuesFeedinYearLastTimeStamp(@ApiParam(value = "",required=true) @PathVariable("providerAccountId") Integer providerAccountId,@ApiParam(value = "",required=true) @PathVariable("meeterId") String meeterId,@ApiParam(value = "",required=true) @PathVariable("datapointname") String datapointname) {

        try
        {
            return new ResponseEntity<>(TimeValueObject.getLastTimestamp(TimeValueObject.Resolution.year, providerAccountId, meeterId, datapointname), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);

    }

}
