/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.jooq.DSLContext;
import org.jooq.Record;
import org.jooq.Result;
import org.jooq.impl.DSL;
import org.openapitools.DbConnector;
import org.openapitools.model.ProviderAccountObject;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.jooq.impl.DSL.field;
import static org.jooq.impl.DSL.table;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-01T09:33:07.307885500+02:00[Europe/Vienna]")
@Validated
@Api(value = "provideraccounts", description = "the provideraccounts API")
public interface ProvideraccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /provideraccounts/{userid}
     * get all provider accounts
     *
     * @param userid  (required)
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "provideraccount", notes = "get provideraccount of user", response = ProviderAccountObject.class, responseContainer = "List", tags={ "provideraccounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = ProviderAccountObject.class, responseContainer = "List") })
    @GetMapping(
        value = "/provideraccounts/{userid}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProviderAccountObject>> provideraccount(@ApiParam(value = "",required=true) @PathVariable("userid") Integer userid) {

        try
        {
            return new ResponseEntity<>(ProviderAccountObject.getProviderAccounts(userid), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }


    /**
     * GET /provideraccounts
     * get all provider accounts
     *
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "provideraccounts", notes = "get all provider accounts", response = ProviderAccountObject.class, responseContainer = "List", tags={ "provideraccounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = ProviderAccountObject.class, responseContainer = "List") })
    @GetMapping(
        value = "/provideraccounts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProviderAccountObject>> provideraccounts()
    {
        try
        {
            return new ResponseEntity<>(ProviderAccountObject.getProviderAccounts(), HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }

}
