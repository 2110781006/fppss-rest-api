/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.DbConnector;
import org.openapitools.model.ProviderAccountObject;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-15T21:38:43.045400+02:00[Europe/Vienna]")
@Validated
@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /accounts/getProviderAccounts
     * get all provider accounts
     *
     * @return successfully query (status code 200)
     */
    @ApiOperation(value = "", nickname = "getProviderAccounts", notes = "get all provider accounts", response = ProviderAccountObject.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully query", response = ProviderAccountObject.class, responseContainer = "List") })
    @GetMapping(
        value = "/accounts/getProviderAccounts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProviderAccountObject>> getProviderAccounts()
    {
        try
        {
            DbConnector connector = new DbConnector(System.getenv("DB_USER"), System.getenv("DB_PASSWORD"));
            connector.open();

            Connection conn = connector.getConnection();

            String query = "select p.id as providerId, p.name as providerName, p.fullname as providerFullname, p.type as providerType, " +
                           "       pa.id as providerAccountId, pa.userame as providerAccountUsername, pa.password as providerAccountPassword " +
                           "from provider p, provider_accounts pa " +
                           "where pa.provider_id = p.id";

            // create the java statement
            Statement st = conn.createStatement();

            // execute the query, and get a java resultset
            ResultSet rs = st.executeQuery(query);

            List<ProviderAccountObject> accounts = new ArrayList();

            // iterate through the java resultset
            while (rs.next())
            {
                ProviderAccountObject providerAccountObject = new ProviderAccountObject();

                providerAccountObject.setProviderId(rs.getInt("providerId"));
                providerAccountObject.setProviderName(rs.getString("providerName"));
                providerAccountObject.setProviderFullName(rs.getString("providerFullname"));
                providerAccountObject.setProviderType(rs.getInt("providerType"));
                providerAccountObject.setProviderAccountId(rs.getInt("providerType"));
                providerAccountObject.setProviderAccountUsername(rs.getString("providerAccountUsername"));
                providerAccountObject.setProviderAccountPassword(rs.getString("providerAccountPassword"));

                accounts.add(providerAccountObject);
            }
            st.close();

            connector.close();

            return new ResponseEntity<>(accounts, HttpStatus.OK);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        return new ResponseEntity<>(HttpStatus.EXPECTATION_FAILED);
    }

}
